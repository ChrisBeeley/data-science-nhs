[
["index.html", "NHS digital service standards in the NHS 1 Introduction", " NHS digital service standards in the NHS Chris Beeley 07/03/2020 1 Introduction The GOV.UK service standard is widely regarded as representing good practice in delivering digital services in the public sector. It is mandatory for certain digital services within government but the latest guidance includes standards which can be adopted across the public sector regardless of whether they would require mandatory assessment. It includes fourteen standards. This document examines these standards from the point of view of data science teams, and particularly data science teams within the NHS. The NHS service standard reproduces the 14 standards, and provides extra information to teams in the NHS in recognition of some of the ways that the NHS can differ from other areas of the public sector. The NHS service standard also includes 3 extra service standards, again recognising the unique environment of the NHS. Examples of the difference between working within the NHS and the rest of the public sector include: multi-disciplinary teams are not common in the NHS - by “multi-disciplinary” we mean teams made up of product and delivery managers, designers, developers, user researchers and content designers NHS delivery teams are less likely to be practising user-centred design and agile service delivery measuring outcomes is often more complex for health more products and services are commissioned locally, for example in hospital trusts, and they are more likely to rely on suppliers, long-term contracts and “off the shelf” solutions These issues are clearly equally important in data science, particularly the last point, and I propose in this document that data science teams across the NHS begin to work more closely in line with the GOV.UK service standard, as expressed within the NHS digital service standard and including the extra three points on it. The fourteen GOV.UK points area listed following, followed by the three extra NHS points. Understand users and their needs in the context of health and care Work towards solving a whole problem for users Provide a joined up experience across all channels Make the service simple to use Make sure everyone can use the service Create a team that includes multidisciplinary skills and perspectives Use agile ways of working Iterate and improve frequently Respect and protect users’ confidentiality and privacy Define what success looks like and be open about how your service is performing Choose the right tools and technology Make new source code open Use and contribute to open standards, common components and patterns Operate a reliable service Support a culture of care Make your service clinically safe Make your service interoperable "],
["data-science-chapter.html", "2 Data science and the service standards 2.1 Make the service simple to use 2.2 Team with multidisciplinary skills and perspectives 2.3 Agile 2.4 Respect and protect users’ confidentiality and privacy 2.5 Make new source code open", " 2 Data science and the service standards Although all of these standards are relevant to data science teams I will now outline those that are most relevant within data science and briefly talk about their importance 2.1 Make the service simple to use // TODO 2.2 Team with multidisciplinary skills and perspectives The digital, data, and technology https://www.gov.uk/government/collections/digital-data-and-technology-profession-capability-framework provides an outline of the types of roles present within an effective digital/ data/ technology team, which comprise: Data job family IT operations job family Product and delivery job family Quality assurance testing (QAT) job family Technical job family User-centred design job family All of these roles are relevant to an effective data science offering in the NHS, although depending on the size of the team and the project it may be that they interact with other teams to access some of these skills (for example, in the technical job family, which includes DevOps, or in the IT job family, which includes service desk operatives). Following is an outline of the types of skills one would expect to find within a data science team. From the data job family data engineer and data scientist are the key roles. An effective data science team would ordinarily be expected to include individuals with skills in these areas. The other skillsets in this family are data analyst and performance analyst. Data analysts and analysts are an important adjunct to an effective data science team but will not necessarily be part of the team itself. Data analysts: &quot;apply tools and techniques for data analysis and data visualisation (including the use of business information tools) identify, collect and migrate data to and from a range of systems manage, clean, abstract and aggregate data alongside a range of analytical studies on that data manipulate and link different data sets summarise and present data and conclusions in the most appropriate format for users&quot; Performance analysts: &gt;…develop performance measurement frameworks - key performance indicators (KPIs), goals, user needs and benefits - and analyse the performance of a service or product against these, adapting your approach and framework appropriately and in line with any changes The synergy with these roles and those of an effective data science team should be clear. Data and performance analysts take metrics and methodologies that have been developed and productionised by the data science team (as well as preexisting data reports) and deliver them across the organisation They make use of dashboards, regular and ad hoc reports and ensure that these measures are used and understood throughout the organisation. For the purposes of this discussion it is enough to say that the difference between the two roles is one of emphasis- with data analysts focused on bringing stakeholders new information and insight from across the organisation and performance analysts on ensuring that performance targets are met and liaising with teams and senior managers when they find that performance is not being met in a particular area. For a fuller discussion of these roles see this discussion of the data job family. It should be clear, therefore, that the work of data scientists can only be brought effectively to bear on an organisation when used in conjunction with data and performance analyst skills. Effective data science teams which do not include these skills, therefore, (which some will), should have a close and mutually supportive relationship with a team which does. It is worth noting that all of these skills do not have to be within one individual in the data science team, and nor does each skill have to be found in only one member of the team. Effective teams can have individuals who have a broad skillset fulfilling several of these roles and/ or “specialists” who are highly experienced within a narrow domain and fulfil this role only in the team. 2.3 Agile Agile methods are widely used in data science and they are extremely helpful in making sure that the analyses and data products that are used meet user specifications as well as ensure that they are thoroughly tested in a live context before deployment. The key message from agile methods is that: iterative, user-centred ways of working will help you get your service in front of real users as soon as possible. Then observing and analysing data on how they use it, and iterating the service based on what you’ve learned. Because you’re not specifying everything up front before you’ve developed an understanding of what users need, you will reduce the risk of delivering the wrong thing Following on from the points made previously about multidisciplinary working it is worth noting that Agile Data Science (https://www.oreilly.com/library/view/agile-data-science/9781491960103/ch01.html) states that agile data science teams favour: Choosing generalists over specialists Preferring small teams over large teams There are eleven different job roles listed within Agile Data Science, and the author argues that having these roles fulfilled by individuals whose skill spans two or three of these roles can contribute to the agility of a team and reduce the overheads that large, specialised teams can suffer from, such as the need for each role to effectively communicate with other similar roles (e.g experience designer, interaction designer, and web developer). NHS service standard number 6 (multidisciplinary teams) explicitly states that teams must “includes people with expertise in how services are delivered across all the relevant channels, and the back end systems the service will need to integrate with”. To make such a team small and agile, it is often preferable for individuals to span several roles, some spanning front end activities (data scientists with experience in UX and web design) and some back end activities (data scientists who can do some or all of their own data engineering). Agile methods are covered in more detail in chapter 3. 2.4 Respect and protect users’ confidentiality and privacy This point is clearly highly germane in healthcare, and it’s worth noting that the rapid prototyping and lack of career specialisation inherent in much of data science do increase the risks that mistakes will be made with user data. This part of the service standard lists many obligations, including: actively identify security and privacy threats to the service and have a robust, proportionate approach to securing information and managing fraud risks have a plan and budget that lets you manage security during the life of the service (for example, by responding to new threats, putting controls in place and applying security patches to software) work with business and information risk teams (for example, senior information risk owners and information asset owners) to make sure the service meets security requirements and regulations without putting delivery at risk carry out appropriate vulnerability and penetration testing Early data science work (for example dashboards which do not contain identifiable data, delivered within an organisation’s firewall) may not require strict adherence to these guidelines, but the danger is that as the scope of a programme of work widens these issues become relevant and the data science team do not take the appropriate steps to ensure that they bring on board security and governance specialists who can ensure that data is processed and delivered to endusers securely. 2.5 Make new source code open Although the advantages of using open source technologies and of open sourcing new technologies have been known for decades (see, e.g. https://en.wikipedia.org/wiki/The_Cathedral_and_the_Bazaar), and government policy has encouraged the production and use of open source within the public sector for ten years or more there has been surprisingly little progress in this area. The NHS is still overwhelmingly dependent on expensive, proprietary software, giving rise to vendor lock in as well as wasting public money. Anecdotal reports suggest even that many IT departments are reluctant to install the statistical programming language R, an absurd situation given its widespread adoption and use across industry and academia. At the same time, NHS organisations are still very reluctant to open source any code produced by their staff or by agencies subcontracted by NHS organisations. Open sourcing new code is important enough to warrant its own chapter (see chapter 4), for the present time it will suffice to quote from the NHS service standard: “Public services are built with public money. So unless there’s a good reason not to, the code they’re based should be made available for other people to reuse and build on. Open source code can save teams duplicating effort and help them build better services faster. And publishing source code under an open licence means that you’re less likely to get locked in to working with a single supplier” "],
["agile-chapter.html", "3 Agile", " 3 Agile // TODO "],
["open-source-chapter.html", "4 Open source 4.1 Introduction 4.2 “Free” and “open” 4.3 Free and open source software 4.4 Licences", " 4 Open source 4.1 Introduction As discussed in an earlier chapter, section 12 of the NHS service standards compels those who follow it to “Make new source code open”. Elsewhere, the NHS is being enjoined to use (as well as produce) open source software (REF). Using free software sounds like an obvious thing for a public sector body to do, and open sourcing its own code and allowing other bodies to make use of it also sounds on the surface like a sensible approach. It’s important first to understand what the words “free” and “open” actually mean. Open source software licences are not well understood within the NHS, and the important distinction between copyright and licensing even less so. This chapter will cover what free and open source software is, discuss why software licensing is so important, cover the most commonly used software licences, and explain the crucial distinction between holding the copyright for a body of code and having a licence to modify and distribute it. 4.2 “Free” and “open” The words free and open both have everyday meanings in English, and the word free is perhaps doubly confusing since it can refer to something that is either provided without cost (“free as in beer”) or without restriction (“free as in speech”). Confusion often arises because much of free and open source software is both free of cost and provided without restriction. However, when organisations like the Free Software Foundation (FSF) use the word free: …you should think of “free” as in “free speech,” not as in “free beer” (https://www.gnu.org/philosophy/free-sw.en.html) Indeed, being able to charge money for copies of source code is part of the meaning of “free” within the definition of free software given by the Free Software Foundation (Ibid.). The word open is sometimes used to mean “visible”, and sometimes in a more restrictive meaning of “free and open source”. Merely releasing code, for example on a website, and making it visible, gives nobody else the right to use, modify or distribute it. In order to avoid this confusion, truly free and open source software is often designated as such- Free and Open Source, often abbreviated to FOSS. The remainder of this chapter will focus on FOSS. Even the meaning of FOSS can be controversial, since there is some disagreement about how “free” different software licences are. It is standard practice to take the list of FOSS licences maintained by the FSF and the Open Source Initiative (OSI) as being the canonical list of free licences. 4.3 Free and open source software Before considering some of the common licences it is worth understanding the different perspectives of the FSF and the OSI and how they affect for what kinds of licence they typically advocate for. The FSF was founded by Richard Stallman (RMS) who became convinced of the need for software freedom through a number of incidents that occurred when he worked at MIT’s AI laboratory in the 70s and 80s. The most famous example of these incidents relates to a modification that RMS had made to a printer in use at the lab. He had modified the printer software so that it would email everyone waiting for print jobs when it jammed, so that they could go and unjam it and prevent a backlog of printing from forming after a jam. When the printer was replaced with a newer version RMS found that the source code was not provided (as it had been with the first printer); moreover when he requested the source from someone who had worked on the printer he was told that it was not available. RMS was therefore unable to modify the new printer software to send emails after a jam as he had done previously. This and other incidents of this kind convinced RMS of the need to protect what he went on to call the “four freedoms” of software: The freedom to run the program as you wish, for any purpose (freedom 0). The freedom to study how the program works, and change it so it does your computing as you wish (freedom 1). Access to the source code is a precondition for this. The freedom to redistribute copies so you can help others (freedom 2). The freedom to distribute copies of your modified versions to others (freedom 3). By doing this you can give the whole community a chance to benefit from your changes. Access to the source code is a precondition for this. Non technical readers may be confused as to the designation of the first freedom as freedom 0. This is a slightly whimsical extension of the custom in most programming languages (C, for example, or Java, but not R) to begin numbering elements of an array at “0” rather than “1”. Any licence that meets these conditions is considered by the FSF to be free. However, the FSF prefers licences which are “copyleft”. Copyleft, which is a distorion of the word “copyright”, is a form of licensing which allows a work to be reused, adapted, and distributed, but forces individuals who make use of that right to give the same rights to any derivative works they produce . Copyleft is therefore a form of licensing which protects the rights of all of the users who use derivative works. The most famous example of a copyleft licence is the GPL, more on which later. Copyleft can be contrasted with “permissive” licences, which give similar rights to reuse, modify, and distribute, but do not mandate that individuals exercising those rights give the same rights over derivative works. There is some debate as to which of these types of licences is the most “free”. The FSF argue that since permissive licences allow others to take away your rights over source code, that they are less free. Others (such as the OSI) state no preference between copyleft and permissive licences and recommend both approaches depending on the project. Still others argue that since permissive licences make fewer demands of individuals reusing and modifying code they are freer than copyleft licences. This debate echoes Erich Fromm’s classic distinction between “freedom from” (freedom from having your rights over source code taken away) and “freedom to” (freedom to reuse and modify code without sharing the derivative work). It is not necessary for this argument to be settled here- for the current purpose it is enough to understand what copyleft licences (like the GPL) do and what permissive licences (such at the MIT licence) do and to make sure that data science teams in the NHS are able to choose the licence that is best for their individual project. 4.4 Licences 4.4.1 Permissive The most famous examples of permissive licences are the MIT and BSD licences. These licences allow reuse and modification but, unlike copyleft licences, also allow the code to be incorporated into a proprietary codebase without making that codebase subject to the terms of the original licence. 4.4.1.1 MIT The MIT licence is one of the shortest and simplest licences, and reads as follows: MIT License Copyright (c) [year] [fullname] Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. This licence shows all the typical features of an open source licence very clearly- it gives permission to others to use, copy, and modify the source, it ensures that the copyright and permission notice is displayed in any modified software, and it includes a notice indicating that the software is provided without warranty of any kind. 4.4.2 Copyleft 4.4.2.1 GPL https://www.gnu.org/licenses/quick-guide-gplv3.en.html // TODO "],
["copyright-chapter.html", "5 Copyright and intellectual property", " 5 Copyright and intellectual property // TODO "]
]
